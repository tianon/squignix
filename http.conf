# https://www.nginx.com/blog/nginx-caching-guide/
# https://nginx.org/en/docs/http/ngx_http_proxy_module.html

# this file includes "proxy_cache_path" with some potentially environment-supplied values
include /etc/nginx/conf.d/squignix-generated.include;

proxy_cache my_cache;
proxy_cache_convert_head on;
proxy_cache_lock on;
proxy_cache_methods GET HEAD;
proxy_cache_revalidate on;
proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
proxy_cache_valid 60m;

proxy_ignore_headers
	Cache-Control
	Expires
	Set-Cookie
	Vary;
# "Pragma" ends up with things like "no-cache" in it, which also cramps our style
proxy_set_header Pragma '';

# HSTS is good, but it really cramps our style (and makes wget sad)
proxy_set_header Strict-Transport-Security '';

# docker + ipv6 = bad vibes
resolver 1.1.1.1 1.0.0.1 ipv6=off;

log_format cached
	'$upstream_cache_status $status $request_method "$scheme://$host:$server_port$request_uri" $server_protocol '
	'[$time_local] $remote_addr '
	'"$http_user_agent"';
access_log off; # turned back on in the "server" blocks (to avoid overlapping logging settings)

server {
	listen 80 default_server;
	listen 11371 default_server;
	server_name _;

	# avoid "Error reading from server - read (104: Connection reset by peer)" when returning *many* cache hits concurrently
	keepalive_timeout 0;

	access_log /var/log/nginx/access.log cached;

	proxy_set_header X-Squignix true;
	if ($http_x_squignix) {
		# prevent infinite recursion
		return 429 'Squignix Redirecting To Itself\n';
	}

	location /__squignix_health__ {
		add_header Content-Type text/plain;
		return 200 "vigorous\n";
	}

	# don't cache Debian "Release" and "Packages" files for too long (hash sum mismatch); regexes adapted from squid-deb-proxy <3
	location ~ \/((Packages|Sources)(\.bz2|\.gz|\.xz)?|Release(\.gpg)?|InRelease|(Translation-.*)(\.bz2|\.gz|\.xz)?)$ {
		proxy_cache_use_stale off;
		proxy_cache_valid 5m;

		proxy_pass $scheme://$host:$server_port;
		proxy_set_header Host $http_host;

		add_header X-Cache-Status $upstream_cache_status;
	}

	location / {
		proxy_pass $scheme://$host:$server_port;
		proxy_set_header Host $http_host;

		add_header X-Cache-Status $upstream_cache_status;
	}
}

# sometimes snapshot.debian.org ends up 404ing but only for certain servers :(
# (https://bugs.debian.org/941903)
# so if we have an upstream with it listed more than once, we can auto-retry on 404
upstream debian_snapshot {
	server snapshot-mlm-01.debian.org:80; # TODO https://bugs.debian.org/1072675#15 (drop the first "backup" below)
	# (listed twice because it has two A records as of 2019-10-14)
	server snapshot.debian.org:80 backup;
	server snapshot.debian.org:80 backup;
}

server {
	listen 80;
	listen 11371;
	server_name snapshot.debian.org;

	# avoid "Error reading from server - read (104: Connection reset by peer)" when returning *many* cache hits concurrently
	keepalive_timeout 0;

	access_log /var/log/nginx/access.log cached;

	proxy_set_header X-Squignix true;
	if ($http_x_squignix) {
		# prevent infinite recursion
		return 429 'Squignix Redirecting To Itself\n';
	}

	proxy_next_upstream error timeout http_403 http_404 http_429 http_500 http_502 http_503 http_504;

	location ~ ^/archive/[^/]+/\d\d\d\d\d\d\d\dT\d\d\d\d\d\dZ/ {
		proxy_cache_valid 365d;

		proxy_pass http://debian_snapshot;
		proxy_set_header Host $http_host;

		add_header X-Cache-Status $upstream_cache_status;
	}

	location / {
		proxy_pass http://debian_snapshot;
		proxy_set_header Host $http_host;

		add_header X-Cache-Status $upstream_cache_status;
	}
}

# vim:set ft=nginx:
